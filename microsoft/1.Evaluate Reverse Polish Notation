class Solution {
public:
    bool isnum(string s)
    { 
    int num;
    if(s[0]=='1'||(s[0]=='-' &&s[1]=='1'))
    {
    return true;
    }
    else if(s[0]=='2'||(s[0]=='-' &&s[1]=='2'))
    {
        return true;
    }
    else if(s[0]=='3'||(s[0]=='-' &&s[1]=='3'))
    {
    
        return true;
    }
    else if(s[0]=='5'||(s[0]=='-' &&s[1]=='5'))
    {
        return true;
    }
    else if(s[0]=='6'||(s[0]=='-' &&s[1]=='6'))
    {
        return true;
    }
    else if(s[0]=='7'||(s[0]=='-' &&s[1]=='7'))
    {
        return true;
    }
    else if(s[0]=='8'||(s[0]=='-' &&s[1]=='8'))
    {
        return true;
    }
    else if(s[0]=='9'||(s[0]=='-' &&s[1]=='9'))
    {
        return true;
    }
    else if(s[0]=='0'||(s[0]=='-' &&s[1]=='0'))
    {
        return true;
    }
    else if(s[0]=='4'||(s[0]=='-' &&s[1]=='4'))
    {
        return true;
    }
    else
    {
        return false;
    }
    
    }


    int strtonum(string a)
    { 
    int num=stoi(a);
    
    return num;
    
    
    }
    bool isadd(string b)
    {
    if(b=="+")
        return true;
    else
        return false;
    
    }

    bool issub(string c)
    {
    if(c=="-")
        return true;
    else
        return false;
    
    }

    bool ismul(string d)
    {
    if(d=="*")
        return true;
    else
        return false;
    
    }

    bool isdiv(string e)
    {
    if(e=="/")
        return true;
    else
        return false;
    
    }

    int evalRPN(vector<string>& tokens) {
    vector<long long int> stack1;
    int num,num1,num2,sum=0;

    int i;
    
    for(i=0;i<tokens.size();i++)
        { 
        if(isnum(tokens[i]))
        {
        num=strtonum(tokens[i]);
            
         stack1.push_back(num);
        }
        else
        {
            sum=0;
            if(isadd(tokens[i]))
            {
            num1=stack1.back();
            stack1.pop_back();
            num2=stack1.back();
            stack1.pop_back();
            sum=num2+num1  ;
            stack1.push_back(sum);
            
            }
            else if(issub(tokens[i]))
            {
            num1=stack1.back();
            stack1.pop_back();
            num2=stack1.back();
            stack1.pop_back();
            sum=num2-num1;
            stack1.push_back(sum);
            
            }
            else if(ismul(tokens[i]))
            {
            num1=stack1.back();
            stack1.pop_back();
            num2=stack1.back();
            stack1.pop_back();
            sum=num2*num1; 
            stack1.push_back(sum);
            
            }
            else if(isdiv(tokens[i]))
            {
            num1=stack1.back();
            stack1.pop_back();
            num2=stack1.back();
            stack1.pop_back();
            sum=num2/num1;
            stack1.push_back(sum);
            
            }
            
        
            
        }
        
        }
    
    return stack1.back() ;
    }
            
            
        
    };
